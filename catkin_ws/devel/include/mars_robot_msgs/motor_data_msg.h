// Generated by gencpp from file mars_robot_msgs/motor_data_msg.msg
// DO NOT EDIT!


#ifndef MARS_ROBOT_MSGS_MESSAGE_MOTOR_DATA_MSG_H
#define MARS_ROBOT_MSGS_MESSAGE_MOTOR_DATA_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mars_robot_msgs
{
template <class ContainerAllocator>
struct motor_data_msg_
{
  typedef motor_data_msg_<ContainerAllocator> Type;

  motor_data_msg_()
    : auger_current(0.0)
    , auger_speed(0.0)
    , right_loco_current(0.0)
    , left_loco_current(0.0)  {
    }
  motor_data_msg_(const ContainerAllocator& _alloc)
    : auger_current(0.0)
    , auger_speed(0.0)
    , right_loco_current(0.0)
    , left_loco_current(0.0)  {
  (void)_alloc;
    }



   typedef float _auger_current_type;
  _auger_current_type auger_current;

   typedef float _auger_speed_type;
  _auger_speed_type auger_speed;

   typedef float _right_loco_current_type;
  _right_loco_current_type right_loco_current;

   typedef float _left_loco_current_type;
  _left_loco_current_type left_loco_current;





  typedef boost::shared_ptr< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> const> ConstPtr;

}; // struct motor_data_msg_

typedef ::mars_robot_msgs::motor_data_msg_<std::allocator<void> > motor_data_msg;

typedef boost::shared_ptr< ::mars_robot_msgs::motor_data_msg > motor_data_msgPtr;
typedef boost::shared_ptr< ::mars_robot_msgs::motor_data_msg const> motor_data_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mars_robot_msgs::motor_data_msg_<ContainerAllocator1> & lhs, const ::mars_robot_msgs::motor_data_msg_<ContainerAllocator2> & rhs)
{
  return lhs.auger_current == rhs.auger_current &&
    lhs.auger_speed == rhs.auger_speed &&
    lhs.right_loco_current == rhs.right_loco_current &&
    lhs.left_loco_current == rhs.left_loco_current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mars_robot_msgs::motor_data_msg_<ContainerAllocator1> & lhs, const ::mars_robot_msgs::motor_data_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mars_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a39659befe0182ae29a42de47aa67fc";
  }

  static const char* value(const ::mars_robot_msgs::motor_data_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a39659befe0182aULL;
  static const uint64_t static_value2 = 0xe29a42de47aa67fcULL;
};

template<class ContainerAllocator>
struct DataType< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mars_robot_msgs/motor_data_msg";
  }

  static const char* value(const ::mars_robot_msgs::motor_data_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 auger_current\n"
"float32 auger_speed\n"
"float32 right_loco_current\n"
"float32 left_loco_current\n"
;
  }

  static const char* value(const ::mars_robot_msgs::motor_data_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.auger_current);
      stream.next(m.auger_speed);
      stream.next(m.right_loco_current);
      stream.next(m.left_loco_current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_data_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mars_robot_msgs::motor_data_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mars_robot_msgs::motor_data_msg_<ContainerAllocator>& v)
  {
    s << indent << "auger_current: ";
    Printer<float>::stream(s, indent + "  ", v.auger_current);
    s << indent << "auger_speed: ";
    Printer<float>::stream(s, indent + "  ", v.auger_speed);
    s << indent << "right_loco_current: ";
    Printer<float>::stream(s, indent + "  ", v.right_loco_current);
    s << indent << "left_loco_current: ";
    Printer<float>::stream(s, indent + "  ", v.left_loco_current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARS_ROBOT_MSGS_MESSAGE_MOTOR_DATA_MSG_H
