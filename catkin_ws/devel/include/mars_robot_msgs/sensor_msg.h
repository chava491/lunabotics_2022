// Generated by gencpp from file mars_robot_msgs/sensor_msg.msg
// DO NOT EDIT!


#ifndef MARS_ROBOT_MSGS_MESSAGE_SENSOR_MSG_H
#define MARS_ROBOT_MSGS_MESSAGE_SENSOR_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mars_robot_msgs
{
template <class ContainerAllocator>
struct sensor_msg_
{
  typedef sensor_msg_<ContainerAllocator> Type;

  sensor_msg_()
    : laser_top_hit(false)
    , laser_left_hit(false)
    , laser_right_hit(false)
    , depth_bottom_switch(false)
    , depth_top_switch(false)
    , yaw(0.0)
    , mass(0.0)  {
    }
  sensor_msg_(const ContainerAllocator& _alloc)
    : laser_top_hit(false)
    , laser_left_hit(false)
    , laser_right_hit(false)
    , depth_bottom_switch(false)
    , depth_top_switch(false)
    , yaw(0.0)
    , mass(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _laser_top_hit_type;
  _laser_top_hit_type laser_top_hit;

   typedef uint8_t _laser_left_hit_type;
  _laser_left_hit_type laser_left_hit;

   typedef uint8_t _laser_right_hit_type;
  _laser_right_hit_type laser_right_hit;

   typedef uint8_t _depth_bottom_switch_type;
  _depth_bottom_switch_type depth_bottom_switch;

   typedef uint8_t _depth_top_switch_type;
  _depth_top_switch_type depth_top_switch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _mass_type;
  _mass_type mass;





  typedef boost::shared_ptr< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_msg_

typedef ::mars_robot_msgs::sensor_msg_<std::allocator<void> > sensor_msg;

typedef boost::shared_ptr< ::mars_robot_msgs::sensor_msg > sensor_msgPtr;
typedef boost::shared_ptr< ::mars_robot_msgs::sensor_msg const> sensor_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mars_robot_msgs::sensor_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mars_robot_msgs::sensor_msg_<ContainerAllocator1> & lhs, const ::mars_robot_msgs::sensor_msg_<ContainerAllocator2> & rhs)
{
  return lhs.laser_top_hit == rhs.laser_top_hit &&
    lhs.laser_left_hit == rhs.laser_left_hit &&
    lhs.laser_right_hit == rhs.laser_right_hit &&
    lhs.depth_bottom_switch == rhs.depth_bottom_switch &&
    lhs.depth_top_switch == rhs.depth_top_switch &&
    lhs.yaw == rhs.yaw &&
    lhs.mass == rhs.mass;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mars_robot_msgs::sensor_msg_<ContainerAllocator1> & lhs, const ::mars_robot_msgs::sensor_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mars_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57d6b1ca27430172008d546be1f39dfb";
  }

  static const char* value(const ::mars_robot_msgs::sensor_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57d6b1ca27430172ULL;
  static const uint64_t static_value2 = 0x008d546be1f39dfbULL;
};

template<class ContainerAllocator>
struct DataType< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mars_robot_msgs/sensor_msg";
  }

  static const char* value(const ::mars_robot_msgs::sensor_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool laser_top_hit\n"
"bool laser_left_hit\n"
"bool laser_right_hit\n"
"bool depth_bottom_switch\n"
"bool depth_top_switch\n"
"float32 yaw\n"
"float32 mass\n"
;
  }

  static const char* value(const ::mars_robot_msgs::sensor_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.laser_top_hit);
      stream.next(m.laser_left_hit);
      stream.next(m.laser_right_hit);
      stream.next(m.depth_bottom_switch);
      stream.next(m.depth_top_switch);
      stream.next(m.yaw);
      stream.next(m.mass);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensor_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mars_robot_msgs::sensor_msg_<ContainerAllocator>& v)
  {
    s << indent << "laser_top_hit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.laser_top_hit);
    s << indent << "laser_left_hit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.laser_left_hit);
    s << indent << "laser_right_hit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.laser_right_hit);
    s << indent << "depth_bottom_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.depth_bottom_switch);
    s << indent << "depth_top_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.depth_top_switch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "mass: ";
    Printer<float>::stream(s, indent + "  ", v.mass);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARS_ROBOT_MSGS_MESSAGE_SENSOR_MSG_H
